name: Thesis Fair Platform
endpoint: amqp://rabbitmq
datasets:
  db:
    type: mongodb
    url: mongodb://dataset-mongodb
    db: thesisFairPlatform
    collection: users
  jwtSecret:
    type: secret
    generate: true
    size: 1024
userStories:
- given: a http post request with path "/user/login" on port 3000 with parameter "username" of type "string" and a parameter "password" of type "string"
# - given: this is an http post request. It has a path "/user/login" on port 3000 with parameter "username" of type "string" and a parameter "password" of type "string"
  then:
  - pre:
      select:
      - username
    do: query dataset "db" find one match state
    post:
      upsert:
      - password as dbpwd
      - _id as uid
  - given: dbpwd equals `undefined`
    then:
    - pre:
        select:
        - '"User not found" as body'
        - '`404` as status'
      do: respond to the http request on port 3000
    - stop
  - pre:
      select:
      - password
      - dbpwd as hash
    do: compare hash
    post:
      set: comparison
      unset:
      - password
      - dbpwd
  - given: comparison not equal `true`
    then:
    - pre:
        select:
          - '"Incorrect password" as body'
          - '`401` as status'
      do: respond to the http request on port 3000
    - stop
  - pre:
      select:
      - uid as payload.uid
      - username as payload.username
    do: create JWT token with secret "jwtSecret" with algorithm "HS512" which expires in "1h" is issued by "QRCSoftware" is not used before "0s" with subject "testing"
    post:
      set: token
  - pre:
      select:
      - token as JWTToken
    do: respond to the http request on port 3000


- given: a http post request with path "/user/validate" on port 3000 with parameter "token" of type "string"
  then:
  - select:
    - token
    do: validate JWT with secret "jwtSecret"
  - respond to the http request on port 3000


- given: a http post request with path "/user" on port 3000 with parameter "username" of type "string" and a parameter "password" of type "string" and a parameter "email" of type "string"
  then:
  - pre:
      select:
      - username
    do: query dataset "db" find one match state
    post:
      set: user
  - given: user not equal `null`
    then:
    - pre:
        select:
        - '"Username already taken" as body'
      do: respond to the http request on port 3000 with status 400
    - stop
  - pre:
      select:
      - email
    do: query dataset "db" find one match state
    post:
      set: user
  - given: user not equal `null`
    then:
    - pre:
        select:
        - '"Email already in use" as body'
      do: respond to the http request on port 3000 with status 400
    - stop

  - pre:
      pick: password
    do: hash
    post:
      set: password
      unset:
      - user
  - store in dataset "db"
  - respond to the http request on port 3000
